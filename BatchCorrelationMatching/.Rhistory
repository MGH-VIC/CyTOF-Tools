rownames(corr)=corr[,1]
#Remove the first row
corr = corr[,-1]
#Create matrix and subtract from 1 (Hungrarian is minimzation problem)
corr = as.matrix(1-corr)
#Get results from hungarian algorithm
results = HungarianSolver(corr)
View(results)
results[["cost"]]
results[["pairs"]]
corr
i=1
#Get the cluster from grp a
clust_a = rownames(corr)[results[i,1]]
#Get the cluster from grp a
clust_a = rownames(corr)[results[[2]][i,1]]
#Get the cluster from grp b
clust_b = colnames(corr)[results[[2]][i,1]]
#Get the cluster from grp a
clust_a = rownames(corr)[results[[2]][i,1]]
#Get the cluster from grp b
clust_b = colnames(corr)[results[[2]][i,1]]
#Extract the corresponding cluster from group one
results[[2]][i,1] = clust_a
#Extract the corresponding cluster from group one
results[[2]][i,2] = clust_b
View(results)
results[["pairs"]]
#Get the names of the comparisons in the multiple pairwise correlations
comps = names(Corr_results)
#Create a list to store the Hungarian algorithm results
results = list()
#Iterate through the comparisons
for (i in 1:length(comps)){
#Get the correlation results from this comparison
tmp_results = Corr_results[[comps[i]]]
#Get the correlation dataframe from this comparison
corr = tmp_results[["CorrResults"]][,1:3]
#Change column names
colnames(corr) = c("grp_a","grp_b","Coeff")
#Create new sheet with wide format (replace NA with zero)
corr = corr %>%
spread(grp_b, Coeff,0)
#Change the rownames to equal group 1 assignment
rownames(corr)=corr[,1]
#Remove the first row
corr = corr[,-1]
#Create matrix and subtract from 1 (Hungrarian is minimzation problem)
corr = as.matrix(1-corr)
#Get results from hungarian algorithm
hung = HungarianSolver(corr)
#Change the name of the hung
names(hung) = c("Value","Matches")
#Use the indexed hung from the Hungarian solver to extract the cluster names
for (j in 1:nrow(hung)){
#Get the cluster from grp a
clust_a = rownames(corr)[hung[["Matches"]][j,1]]
#Get the cluster from grp b
clust_b = colnames(corr)[hung[["Matches"]][j,1]]
#Extract the corresponding cluster from group one
hung[["Matches"]][j,1] = clust_a
#Extract the corresponding cluster from group one
hung[["Matches"]][j,2] = clust_b
}
}
#Get the names of the comparisons in the multiple pairwise correlations
comps = names(Corr_results)
#Create a list to store the Hungarian algorithm results
results = list()
#Iterate through the comparisons
for (i in 1:length(comps)){
#Get the correlation results from this comparison
tmp_results = Corr_results[[comps[i]]]
#Get the correlation dataframe from this comparison
corr = tmp_results[["CorrResults"]][,1:3]
#Change column names
colnames(corr) = c("grp_a","grp_b","Coeff")
#Create new sheet with wide format (replace NA with zero)
corr = corr %>%
spread(grp_b, Coeff,0)
#Change the rownames to equal group 1 assignment
rownames(corr)=corr[,1]
#Remove the first row
corr = corr[,-1]
#Create matrix and subtract from 1 (Hungrarian is minimzation problem)
corr = as.matrix(1-corr)
#Get results from hungarian algorithm
hung = HungarianSolver(corr)
#Change the name of the hung
names(hung) = c("Value","Matches")
#Use the indexed hung from the Hungarian solver to extract the cluster names
for (j in 1:nrow(hung[["Matches"]])){
#Get the cluster from grp a
clust_a = rownames(corr)[hung[["Matches"]][j,1]]
#Get the cluster from grp b
clust_b = colnames(corr)[hung[["Matches"]][j,1]]
#Extract the corresponding cluster from group one
hung[["Matches"]][j,1] = clust_a
#Extract the corresponding cluster from group one
hung[["Matches"]][j,2] = clust_b
}
}
#Get the names of the comparisons in the multiple pairwise correlations
comps = names(Corr_results)
#Create a list to store the Hungarian algorithm results
results = list()
#Iterate through the comparisons
for (i in 1:length(comps)){
#Get the correlation results from this comparison
tmp_results = Corr_results[[comps[i]]]
#Get the correlation dataframe from this comparison
corr = tmp_results[["CorrResults"]][,1:3]
#Change column names
colnames(corr) = c("grp_a","grp_b","Coeff")
#Create new sheet with wide format (replace NA with zero)
corr = corr %>%
spread(grp_b, Coeff,0)
#Change the rownames to equal group 1 assignment
rownames(corr)=corr[,1]
#Remove the first row
corr = corr[,-1]
#Create matrix and subtract from 1 (Hungrarian is minimzation problem)
corr = as.matrix(1-corr)
#Get results from hungarian algorithm
hung = HungarianSolver(corr)
#Change the name of the hung
names(hung) = c("Value","Matches")
#Use the indexed hung from the Hungarian solver to extract the cluster names
for (j in 1:nrow(hung[["Matches"]])){
#Get the cluster from grp a
clust_a = rownames(corr)[hung[["Matches"]][j,1]]
#Get the cluster from grp b
clust_b = colnames(corr)[hung[["Matches"]][j,1]]
#Extract the corresponding cluster from group one
hung[["Matches"]][j,1] = clust_a
#Extract the corresponding cluster from group one
hung[["Matches"]][j,2] = clust_b
}
#Update the results list to include this comparison
results[[comps[i]]] = hung
}
View(results)
results[["Grp1_Grp2"]][["Matches"]]
i=1
#Get the correlation results from this comparison
tmp_results = Corr_results[[comps[i]]]
#Get the correlation dataframe from this comparison
corr = tmp_results[["CorrResults"]][,1:3]
#Change column names
colnames(corr) = c("grp_a","grp_b","Coeff")
#Create new sheet with wide format (replace NA with zero)
corr = corr %>%
spread(grp_b, Coeff,0)
#Change the rownames to equal group 1 assignment
rownames(corr)=corr[,1]
#Remove the first row
corr = corr[,-1]
#Create matrix and subtract from 1 (Hungrarian is minimzation problem)
corr = as.matrix(1-corr)
#Get results from hungarian algorithm
hung = HungarianSolver(corr)
#Change the name of the hung
names(hung) = c("Value","Matches")
View(hung)
hung[["Matches"]]
j=1
#Get the cluster from grp a
clust_a = rownames(corr)[hung[["Matches"]][j,1]]
#Get the cluster from grp b
clust_b = colnames(corr)[hung[["Matches"]][j,1]]
#Extract the corresponding cluster from group one
hung[["Matches"]][j,1] = clust_a
#Extract the corresponding cluster from group one
hung[["Matches"]][j,2] = clust_b
j=2
#Get the cluster from grp a
clust_a = rownames(corr)[hung[["Matches"]][j,1]]
#Get the cluster from grp b
clust_b = colnames(corr)[hung[["Matches"]][j,1]]
#Extract the corresponding cluster from group one
hung[["Matches"]][j,1] = clust_a
#Extract the corresponding cluster from group one
hung[["Matches"]][j,2] = clust_b
View(hung)
hung[["Matches"]]
#Get the cluster from grp a
clust_a = rownames(corr)[as.numeric(hung[["Matches"]][j,1])]
#Get the cluster from grp b
clust_b = colnames(corr)[as.numeric(hung[["Matches"]][j,1])]
as.numeric(hung[["Matches"]][j,1])
(hung[["Matches"]][j,1])
View(hung)
hung[["Matches"]]
j=3
#Get the cluster from grp a
clust_a = rownames(corr)[(hung[["Matches"]][j,1])]
View(hung)
hung[["Matches"]]
#Get the cluster from grp b
clust_b = colnames(corr)[as.numeric(hung[["Matches"]][j,1])]
es(Corr_results)
#Create a list to store the Hungarian algorithm results
results = list()
#Iterate through the comparisons
for (i in 1:length(comps)){
#Get the correlation results from this comparison
tmp_results = Corr_results[[comps[i]]]
#Get the correlation dataframe from this comparison
corr = tmp_results[["CorrResults"]][,1:3]
#Change column names
colnames(corr) = c("grp_a","grp_b","Coeff")
#Create new sheet with wide format (replace NA with zero)
corr = corr %>%
spread(grp_b, Coeff,0)
#Change the rownames to equal group 1 assignment
rownames(corr)=corr[,1]
#Remove the first row
corr = corr[,-1]
#Create matrix and subtract from 1 (Hungrarian is minimzation problem)
corr = as.matrix(1-corr)
#Get results from hungarian algorithm
hung = HungarianSolver(corr)
#Change the name of the hung
names(hung) = c("Value","Matches")
#Use the indexed hung from the Hungarian solver to extract the cluster names
for (j in 1:nrow(hung[["Matches"]])){
#Get the cluster from grp a
clust_a = rownames(corr)[(as.numeric(hung[["Matches"]][j,1])]
#Get the cluster from grp b
clust_b = colnames(corr)[as.numeric(hung[["Matches"]][j,1])]
#Extract the corresponding cluster from group one
hung[["Matches"]][j,1] = clust_a
#Extract the corresponding cluster from group one
hung[["Matches"]][j,2] = clust_b
}
#Update the results list to include this comparison
results[[comps[i]]] = hung
}
}
#Get the names of the comparisons in the multiple pairwise correlations
comps = names(Corr_results)
#Create a list to store the Hungarian algorithm results
results = list()
#Iterate through the comparisons
for (i in 1:length(comps)){
#Get the correlation results from this comparison
tmp_results = Corr_results[[comps[i]]]
#Get the correlation dataframe from this comparison
corr = tmp_results[["CorrResults"]][,1:3]
#Change column names
colnames(corr) = c("grp_a","grp_b","Coeff")
#Create new sheet with wide format (replace NA with zero)
corr = corr %>%
spread(grp_b, Coeff,0)
#Change the rownames to equal group 1 assignment
rownames(corr)=corr[,1]
#Remove the first row
corr = corr[,-1]
#Create matrix and subtract from 1 (Hungrarian is minimzation problem)
corr = as.matrix(1-corr)
#Get results from hungarian algorithm
hung = HungarianSolver(corr)
#Change the name of the hung
names(hung) = c("Value","Matches")
#Use the indexed hung from the Hungarian solver to extract the cluster names
for (j in 1:nrow(hung[["Matches"]])){
#Get the cluster from grp a
clust_a = rownames(corr)[(as.numeric(hung[["Matches"]][j,1])]
#Get the cluster from grp b
clust_b = colnames(corr)[as.numeric(hung[["Matches"]][j,1])]
#Extract the corresponding cluster from group one
hung[["Matches"]][j,1] = clust_a
#Extract the corresponding cluster from group one
hung[["Matches"]][j,2] = clust_b
}
#Update the results list to include this comparison
results[[comps[i]]] = hung
}
}
#Get the names of the comparisons in the multiple pairwise correlations
comps = names(Corr_results)
#Create a list to store the Hungarian algorithm results
results = list()
#Iterate through the comparisons
for (i in 1:length(comps)){
#Get the correlation results from this comparison
tmp_results = Corr_results[[comps[i]]]
#Get the correlation dataframe from this comparison
corr = tmp_results[["CorrResults"]][,1:3]
#Change column names
colnames(corr) = c("grp_a","grp_b","Coeff")
#Create new sheet with wide format (replace NA with zero)
corr = corr %>%
spread(grp_b, Coeff,0)
#Change the rownames to equal group 1 assignment
rownames(corr)=corr[,1]
#Remove the first row
corr = corr[,-1]
#Create matrix and subtract from 1 (Hungrarian is minimzation problem)
corr = as.matrix(1-corr)
#Get results from hungarian algorithm
hung = HungarianSolver(corr)
#Change the name of the hung
names(hung) = c("Value","Matches")
#Use the indexed hung from the Hungarian solver to extract the cluster names
for (j in 1:nrow(hung[["Matches"]])){
#Get the cluster from grp a
clust_a = rownames(corr)[as.numeric(hung[["Matches"]][j,1])]
#Get the cluster from grp b
clust_b = colnames(corr)[as.numeric(hung[["Matches"]][j,1])]
#Extract the corresponding cluster from group one
hung[["Matches"]][j,1] = clust_a
#Extract the corresponding cluster from group one
hung[["Matches"]][j,2] = clust_b
}
#Update the results list to include this comparison
results[[comps[i]]] = hung
}
View(results)
results[["Grp1_Grp2"]][["Matches"]]
View(tmp_results)
#Get the names of the comparisons in the multiple pairwise correlations
comps = names(Corr_results)
#Create a list to store the Hungarian algorithm results
results = list()
#Iterate through the comparisons
for (i in 1:length(comps)){
#Get the correlation results from this comparison
tmp_results = Corr_results[[comps[i]]]
#Get the correlation dataframe from this comparison
og_corr = tmp_results[["CorrResults"]][,1:3]
#Change column names
colnames(corr) = c("grp_a","grp_b","Coeff")
#Create new sheet with wide format (replace NA with zero)
corr = corr %>%
spread(grp_b, Coeff,0)
#Change the rownames to equal group 1 assignment
rownames(corr)=corr[,1]
#Remove the first row
corr = corr[,-1]
#Create matrix and subtract from 1 (Hungrarian is minimzation problem)
corr = as.matrix(1-corr)
#Get results from hungarian algorithm
hung = HungarianSolver(corr)
#Change the name of the hung
names(hung) = c("Value","Matches")
#Use the indexed hung from the Hungarian solver to extract the cluster names
for (j in 1:nrow(hung[["Matches"]])){
#Get the cluster from grp a
clust_a = rownames(corr)[as.numeric(hung[["Matches"]][j,1])]
#Get the cluster from grp b
clust_b = colnames(corr)[as.numeric(hung[["Matches"]][j,1])]
#Extract the corresponding cluster from group one
hung[["Matches"]][j,1] = clust_a
#Extract the corresponding cluster from group one
hung[["Matches"]][j,2] = clust_b
}
#Update the column names of the matches to reflect the group clusters
colnames(hung[["Matches"]]) = colnames(og_corr)[1:2]
#Update the results list to include this comparison
results[[comps[i]]] = hung
}
colnames(og_corr)[1:2]
colnames(hung[["Matches"]])
hung[["Matches"]]
View(hung)
hung[["Matches"]]
#Get the names of the comparisons in the multiple pairwise correlations
comps = names(Corr_results)
#Create a list to store the Hungarian algorithm results
results = list()
#Iterate through the comparisons
for (i in 1:length(comps)){
#Get the correlation results from this comparison
tmp_results = Corr_results[[comps[i]]]
#Get the correlation dataframe from this comparison
og_corr = tmp_results[["CorrResults"]][,1:3]
#Change column names
colnames(corr) = c("grp_a","grp_b","Coeff")
#Create new sheet with wide format (replace NA with zero)
corr = corr %>%
spread(grp_b, Coeff,0)
#Change the rownames to equal group 1 assignment
rownames(corr)=corr[,1]
#Remove the first row
corr = corr[,-1]
#Create matrix and subtract from 1 (Hungrarian is minimzation problem)
corr = as.matrix(1-corr)
#Get results from hungarian algorithm
hung = HungarianSolver(corr)
#Change the name of the hung
names(hung) = c("Value","Matches")
#Use the indexed hung from the Hungarian solver to extract the cluster names
for (j in 1:nrow(hung[["Matches"]])){
#Get the cluster from grp a
clust_a = rownames(corr)[as.numeric(hung[["Matches"]][j,1])]
#Get the cluster from grp b
clust_b = colnames(corr)[as.numeric(hung[["Matches"]][j,1])]
#Extract the corresponding cluster from group one
hung[["Matches"]][j,1] = clust_a
#Extract the corresponding cluster from group one
hung[["Matches"]][j,2] = clust_b
}
#Create dataframe from the matches
hung[["Matches"]] = as.data.frame(hung[["Matches"]])
#Update the column names of the matches to reflect the group clusters
colnames(hung[["Matches"]]) = colnames(og_corr)[1:2]
#Update the results list to include this comparison
results[[comps[i]]] = hung
}
#Get the names of the comparisons in the multiple pairwise correlations
comps = names(Corr_results)
#Create a list to store the Hungarian algorithm results
results = list()
i=2
#Get the correlation results from this comparison
tmp_results = Corr_results[[comps[i]]]
#Get the correlation dataframe from this comparison
og_corr = tmp_results[["CorrResults"]][,1:3]
#Change column names
colnames(corr) = c("grp_a","grp_b","Coeff")
#Create new sheet with wide format (replace NA with zero)
corr = corr %>%
spread(grp_b, Coeff,0)
#Change the rownames to equal group 1 assignment
rownames(corr)=corr[,1]
#Remove the first row
corr = corr[,-1]
#Create matrix and subtract from 1 (Hungrarian is minimzation problem)
corr = as.matrix(1-corr)
#Get the names of the comparisons in the multiple pairwise correlations
comps = names(Corr_results)
#Create a list to store the Hungarian algorithm results
results = list()
i=2
#Get the correlation results from this comparison
tmp_results = Corr_results[[comps[i]]]
#Get the correlation dataframe from this comparison
og_corr = tmp_results[["CorrResults"]][,1:3]
#Change column names
colnames(corr) = c("grp_a","grp_b","Coeff")
View(corr)
#Get the correlation results from this comparison
tmp_results = Corr_results[[comps[i]]]
View(tmp_results)
View(tmp_results[["CorrResults"]])
#Get the correlation dataframe from this comparison
og_corr = tmp_results[["CorrResults"]][,1:3]
View(og_corr)
#Get the names of the comparisons in the multiple pairwise correlations
comps = names(Corr_results)
#Create a list to store the Hungarian algorithm results
results = list()
#Iterate through the comparisons
for (i in 1:length(comps)){
#Get the correlation results from this comparison
tmp_results = Corr_results[[comps[i]]]
#Get the correlation dataframe from this comparison
og_corr = tmp_results[["CorrResults"]][,1:3]
#Create a new datafame
corr = og_corr
#Change column names
colnames(corr) = c("grp_a","grp_b","Coeff")
#Create new sheet with wide format (replace NA with zero)
corr = corr %>%
spread(grp_b, Coeff,0)
#Change the rownames to equal group 1 assignment
rownames(corr)=corr[,1]
#Remove the first row
corr = corr[,-1]
#Create matrix and subtract from 1 (Hungrarian is minimzation problem)
corr = as.matrix(1-corr)
#Get results from hungarian algorithm
hung = HungarianSolver(corr)
#Change the name of the hung
names(hung) = c("Value","Matches")
#Use the indexed hung from the Hungarian solver to extract the cluster names
for (j in 1:nrow(hung[["Matches"]])){
#Get the cluster from grp a
clust_a = rownames(corr)[as.numeric(hung[["Matches"]][j,1])]
#Get the cluster from grp b
clust_b = colnames(corr)[as.numeric(hung[["Matches"]][j,1])]
#Extract the corresponding cluster from group one
hung[["Matches"]][j,1] = clust_a
#Extract the corresponding cluster from group one
hung[["Matches"]][j,2] = clust_b
}
#Create dataframe from the matches
hung[["Matches"]] = as.data.frame(hung[["Matches"]])
#Update the column names of the matches to reflect the group clusters
colnames(hung[["Matches"]]) = colnames(og_corr)[1:2]
#Update the results list to include this comparison
results[[comps[i]]] = hung
}
View(results)
View(results[["Grp2_Grp3"]][["Matches"]])
View(results[["Grp1_Grp2"]][["Matches"]])
View(results[["Grp1_Grp3"]][["Matches"]])
View(results)
#Now extract the results from each of the comparisons to construct a final dataframe
test = cbind.fill(results[1][["Matches"]]results[2][["Matches"]], fill = NA)
#Now extract the results from each of the comparisons to construct a final dataframe
test = cbind.fill(results[1][["Matches"]],results[2][["Matches"]], fill = NA)
library(rowr)
#Now extract the results from each of the comparisons to construct a final dataframe
test = cbind.fill(results[1][["Matches"]],results[2][["Matches"]], fill = NA)
#Now extract the results from each of the comparisons to construct a final dataframe
test = cbind.fill(results[[1]][["Matches"]],results[[2]][["Matches"]], fill = NA)
View(test)
#Now extract the results from each of the comparisons to construct a final dataframe
test = cbind.fill(results[[1]][["Matches"]],results[[2]][["Matches"]],results[[3]][["Matches"]], fill = NA)
View(test)
