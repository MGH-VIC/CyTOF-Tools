library(NbClust)
View(corr_results)
View(corr_results)
data = dplyr::select(corr_results[[3]],-contains("Cluster")) %>%
filter(contains("Cluster"))
dplyr::select(corr_results[[3]],-contains("Cluster"))
View(corr_results)
View(corr_results[[3]])
CorrCalculation = function(filename,sheetname,corr_type="spearman",export=FALSE,cluster_prefix=NULL){
#This function will do the calculation for your correlation analysis. This analysis is made for data that
#has cluster data attached to columns that correspond to the measures that you want to correlate to. The column
#names in your excel file must be written as "Cluster #" for each cluster. See example excel file if you are having
#format issues.
#filename: Indicates the path to your excel file (Ex: filename = "user/path/../myexcelfile.xlsx"). You can input a list of paths as well in order
#to concatenate a list of files for correlation analysis (Ex: filename = list()). If you choose to do this, you must also include a sheet list
#groups: Indicates the groups you want to use for the calculation (Ex: groups = c("Naive","Challenged"))
#type: Indicates the type of correlation to use (Ex: "spearman", "pearson")
#export: Logical indicating whether or not you want to export excel files for the correlation data (includes p-value and R value)
#cluster_prefix: List indicating what prefixes you want to add to each of your cluster types in the dataframe. You only need to input this if you are
#including multiple filenames (Ex: cluster_prefix = list("T","B","I"))
#Read the excel file(s):
if (class(filename) == "list"){
print("Detected a list of data files...")
data = list()
clusters = list()
not_clusters = list()
for (i in 1:length(filename)){
data[[i]] = read.xlsx(filename[[i]],sheet=sheetname[[i]])
clusters[[i]] = dplyr::select(data[[i]], starts_with("Cluster"))
colnames(clusters[[i]]) = paste(cluster_prefix[[i]],colnames(clusters[[i]]),sep = " ")
not_clusters[[i]] = dplyr::select(data[[i]],-contains("Cluster")) %>%
dplyr::select(-contains("Category")) %>%
dplyr::select(-contains("X"))
}
clusters = do.call(cbind,clusters)
not_clusters = do.call(cbind,not_clusters)
#Remove duplicate columns
not_clusters = not_clusters[,!duplicated(colnames(not_clusters),fromLast = TRUE)]
} else {
print("Detected a single data file")
data = read.xlsx(filename,sheet=sheetname)
#Create separate data frames for clusters and other data
clusters = dplyr::select(data, starts_with("Cluster"))
if(!is.null(cluster_prefix)){
colnames(clusters) = paste(cluster_prefix[[i]],colnames(clusters[[i]]),sep = " ")
}
not_clusters = dplyr::select(data,-contains("Cluster")) %>%
dplyr::select(-contains("Category")) %>%
dplyr::select(-contains("X"))
}
#Perform the correlation calculations
clusters = as.matrix(clusters)
not_clusters = as.matrix(not_clusters)
tot_corr = rcorr(clusters, not_clusters, type=corr_type)
p_value = as.data.frame(tot_corr$P)
r_value = as.data.frame(tot_corr$r)
#Export the data if you choose
if (export){
write.xlsx(r_value, "Correlation Coefficients Matrix.xlsx", row.names = TRUE)
write.xlsx(p_value, "Correlation P-values.xlsx", row.names = TRUE)
}
return(list(clusters,not_clusters,r_value,p_value,tot_corr,filename,sheetname))
}
corr_results = CorrCalculation(filename,sheetname,export = FALSE,cluster_prefix=cluster_prefix)
data = dplyr::select(corr_results[[3]],-contains("Cluster")) %>%
filter(contains("Cluster"))
data = dplyr::select(corr_results[[3]],-contains("Cluster"))
View(data)
data = dplyr::select(corr_results[[3]],-contains("Cluster")) %>%
t()%>%
filter(contains("Cluster"))%>%
t()
data = data[!grep("Cluster",rownames(data)),]
data = dplyr::select(corr_results[[3]],-contains("Cluster"))
data = data[!grep("Cluster",rownames(data)),]
#Get the corr coefficient dataframe that you need based on your previous results from CorrCalculation (indexed by corr_resuls[[3]])
data = dplyr::select(corr_results[[3]],-contains("Cluster"))
data = data[grepl("Cluster",rownames(data)),]
#Get the corr coefficient dataframe that you need based on your previous results from CorrCalculation (indexed by corr_resuls[[3]])
data = dplyr::select(corr_results[[3]],-contains("Cluster"))
data = data[!grepl("Cluster",rownames(data)),]
#Get the corr coefficient dataframe that you need based on your previous results from CorrCalculation (indexed by corr_resuls[[3]])
data = dplyr::select(corr_results[[3]],-contains("Cluster"))
data = data[grepl("Cluster",rownames(data)),]
source("modified_pheatmap.R")
source('CorrCalculations.R')
#Get the functions that you will need
source("modified_pheatmap.R")
source('CorrCalculations.R')
CorrCalculation
OptimalClustering
#Get the functions that you will need
source("modified_pheatmap.R")
source('CorrCalculations.R')
require("magittr")
require("magrittr")
require("stats")
require("plyr")
require(gdata)
#Check for missing packages and install if needed
require(dplyr)
require(Hmisc)
require(ppcor)
require(openxlsx)
require(flashClust)
require(dendextend)
require(gtable)
require(gridExtra)
require(grid)
require(gdata)
require(RColorBrewer)
require(magrittr)
require(factoextra)
require(NbClust)
filename="For Correlation Analysis 10302019 Clin Reduced.xlsx"
sheetname = "Sheet1"
corr_type="spearman"
export=FALSE
cluster_prefix=NULL
print("Detected a single data file")
data = na.omit(read.xlsx(filename,sheet=sheetname))
View(data)
filename="For Correlation Analysis 10302019 Clin Reduced.xlsx"
sheetname = "Sheet1"
corr_type="spearman"
export=FALSE
cluster_prefix=NULL
cell_cols = 9:27
not_cell_cols = 4:8
print("Detected a single data file")
data = na.omit(read.xlsx(filename,sheet=sheetname))
groups = c("1,2")
data = data[data[,"Group"] %in% groups]
View(data)
groups = c(1,2)
print("Detected a single data file")
data = na.omit(read.xlsx(filename,sheet=sheetname))
data = data[data[,"Group"] %in% groups]
View(data)
groups = c(1,2)
print("Detected a single data file")
data = na.omit(read.xlsx(filename,sheet=sheetname))
data = data[data[,"Group"] %in% groups]
View(data)
data = na.omit(read.xlsx(filename,sheet=sheetname))
data = data[data[,"Group"] %in% groups,]
View(data)
View(data)
group_col = 3
print("Detected a single data file")
#Read the data
data = na.omit(read.xlsx(filename,sheet=sheetname))
#Choose only the groups you want to include in the analysis
data = data[data[,"Group"] %in% groups,]
#Read the data
data = na.omit(read.xlsx(filename,sheet=sheetname))
#Choose only the groups you want to include in the analysis
data = data[data[,group_col] %in% groups,]
#------------------Correlation Analysis----------------------------
#Enter the name of your data sheet
filename="For Correlation Analysis 10302019 Clin Reduced.xlsx"
#Enter the name of the sheet of the data sheet you are using for calculations
sheetname = "Sheet1"
#Enter correlation type
corr_type="spearman"
#Do you want to export the p values and correlation coefficient data?
export=FALSE
#If you are exporting, what do you want to call the correlation coefficient sheet?
r_export_name = "Testing R value.xlsx"
#If you are exporting, what do you want to call the p-value sheet?
r_export_name = "Testing P value.xlsx"
#Do you want to add a prefix to cluster names? If not, leave as NULL
cluster_prefix=NULL
#Which columns are you using as cells for calculation?
cell_cols = 9:27
#Which columns are you using as clinical measures?
not_cell_cols = 4:8
#Which column indicates the groups you are using?
group_col = 3
#Which groups are you wanting to use? (Ex. groups = c(1,2) if numbered Ex. groups = c("Vaccinated","Naive") if strings)
groups = c(1,2)
#Run the correlation calculation
corr_results = CorrCalculation(filename,sheetname,group_col,cell_cols,not_cell_cols,corr_type,export,
r_export_name,p_export_name,cluster_prefix)
#Get the functions that you will need
source("modified_pheatmap.R")
source('CorrCalculations.R')
#------------------Correlation Analysis----------------------------
#Enter the name of your data sheet
filename="For Correlation Analysis 10302019 Clin Reduced.xlsx"
#Enter the name of the sheet of the data sheet you are using for calculations
sheetname = "Sheet1"
#Enter correlation type
corr_type="spearman"
#Do you want to export the p values and correlation coefficient data?
export=FALSE
#If you are exporting, what do you want to call the correlation coefficient sheet?
r_export_name = "Testing R value.xlsx"
#If you are exporting, what do you want to call the p-value sheet?
r_export_name = "Testing P value.xlsx"
#Do you want to add a prefix to cluster names? If not, leave as NULL
cluster_prefix=NULL
#Which columns are you using as cells for calculation?
cell_cols = 9:27
#Which columns are you using as clinical measures?
not_cell_cols = 4:8
#Which column indicates the groups you are using?
group_col = 3
#Which groups are you wanting to use? (Ex. groups = c(1,2) if numbered Ex. groups = c("Vaccinated","Naive") if strings)
groups = c(1,2)
#Run the correlation calculation
corr_results = CorrCalculation(filename,sheetname,group_col,cell_cols,not_cell_cols,corr_type,export,
r_export_name,p_export_name,cluster_prefix)
corr_results=corr_results
distance="euclidean"
method="ward.D2"
max_clust=5
max_clust=6
#Set your dataframe if you input that instead of the corr_results output from CorrCalculation function
if (!is.null(corr_matrix)){
print("Detected manual matrix input")
data = as.data.frame(corr_matrix)
} else{
#Get the corr coefficient dataframe that you need based on your previous results from CorrCalculation (indexed by corr_resuls[[3]])
data = dplyr::select(corr_results[[3]],-contains("Cluster"))
data = data[grepl("Cluster",rownames(data)),]
}
corr_matrix=NULL
#Set your dataframe if you input that instead of the corr_results output from CorrCalculation function
if (!is.null(corr_matrix)){
print("Detected manual matrix input")
data = as.data.frame(corr_matrix)
} else{
#Get the corr coefficient dataframe that you need based on your previous results from CorrCalculation (indexed by corr_resuls[[3]])
data = dplyr::select(corr_results[[3]],-contains("Cluster"))
data = data[grepl("Cluster",rownames(data)),]
}
View(corr_results)
corr_results[[3]]
View(corr_results[[3]])
View(corr_results[[3]])
#Run the calculation
results=NbClust(corr_results[[3]],distance=distance,min.nc = min_clust,max.nc = max_clust,
method = method)
min_clust=5
max_clust=6
corr_matrix=NULL
#Run the calculation
results=NbClust(corr_results[[3]],distance=distance,min.nc = min_clust,max.nc = max_clust,
method = method)
max_clust=7
#Run the calculation
results=NbClust(corr_results[[3]],distance=distance,min.nc = min_clust,max.nc = max_clust,
method = method)
install.packages(hclust)
install.packages(hclust)
install.packages("hclust")
#Run the calculation
results=NbClust(corr_results[[3]],distance=distance,min.nc = min_clust,max.nc = max_clust,
method = "single")
#Run the calculation
results=NbClust(corr_results[[3]],distance=distance,min.nc = min_clust,max.nc = max_clust,
method = "single")
#Run the calculation
results=NbClust(corr_results[[3]],distance=distance,min.nc = min_clust,max.nc = max_clust,
method = "average")
#Run the calculation
results=NbClust(corr_results[[3]],distance=distance,min.nc = min_clust,max.nc = max_clust,
method = "ward.D2")
#Run the calculation
results=NbClust(corr_results[[3]],distance=distance,min.nc = min_clust,max.nc = max_clust,
method = 1)
#Run the calculation
results=NbClust(corr_results[[3]],distance=distance,min.nc = min_clust,max.nc = max_clust,
method = "ward.D")
#Run the calculation
results=NbClust(corr_results[[3]],distance=distance,min.nc = min_clust,max.nc = max_clust,
method = "ward.D2")
install.packages("NbClust")
install.packages("NbClust")
#Run the calculation
results=NbClust(corr_results[[3]],distance=distance,min.nc = min_clust,max.nc = max_clust,
method = "ward.D2")
library(NbClust)
#Run the calculation
results=NbClust(corr_results[[3]],distance=distance,min.nc = min_clust,max.nc = max_clust,
method = "ward.D2")
#------------------Correlation Analysis----------------------------
#Enter the name of your data sheet
filename="For Correlation Analysis 10302019.xlsx"
#Enter the name of the sheet of the data sheet you are using for calculations
sheetname = "Sheet1"
#Enter correlation type
corr_type="spearman"
#Do you want to export the p values and correlation coefficient data?
export=FALSE
#If you are exporting, what do you want to call the correlation coefficient sheet?
r_export_name = "Testing R value.xlsx"
#If you are exporting, what do you want to call the p-value sheet?
r_export_name = "Testing P value.xlsx"
#Do you want to add a prefix to cluster names? If not, leave as NULL
cluster_prefix=NULL
#Which columns are you using as cells for calculation?
cell_cols = 9:27
#Which columns are you using as clinical measures?
not_cell_cols = 4:8
#Which column indicates the groups you are using?
group_col = 3
#Which groups are you wanting to use? (Ex. groups = c(1,2) if numbered Ex. groups = c("Vaccinated","Naive") if strings)
groups = c(1,2)
#Run the correlation calculation
corr_results = CorrCalculation(filename,sheetname,group_col,cell_cols,not_cell_cols,corr_type,export,
r_export_name,p_export_name,cluster_prefix)
source("modified_pheatmap.R")
source('CorrCalculations.R')
#------------------Correlation Analysis----------------------------
#Enter the name of your data sheet
filename="For Correlation Analysis 10302019.xlsx"
#Enter the name of the sheet of the data sheet you are using for calculations
sheetname = "Sheet1"
#Enter correlation type
corr_type="spearman"
#Do you want to export the p values and correlation coefficient data?
export=FALSE
#If you are exporting, what do you want to call the correlation coefficient sheet?
r_export_name = "Testing R value.xlsx"
#If you are exporting, what do you want to call the p-value sheet?
r_export_name = "Testing P value.xlsx"
#Do you want to add a prefix to cluster names? If not, leave as NULL
cluster_prefix=NULL
#Which columns are you using as cells for calculation?
cell_cols = 9:27
#Which columns are you using as clinical measures?
not_cell_cols = 4:8
#Which column indicates the groups you are using?
group_col = 3
#Which groups are you wanting to use? (Ex. groups = c(1,2) if numbered Ex. groups = c("Vaccinated","Naive") if strings)
groups = c(1,2)
#Run the correlation calculation
corr_results = CorrCalculation(filename,sheetname,group_col,cell_cols,not_cell_cols,corr_type,export,
r_export_name,p_export_name,cluster_prefix)
corr_results=corr_results
distance="euclidean"
method="ward.D2"
min_clust=5
max_clust=7
corr_matrix=NULL
#Run the calculation
results=NbClust(corr_results[[3]],distance=distance,min.nc = min_clust,max.nc = max_clust,
method = "ward.D2")
install.packages("NbClust")
install.packages("NbClust")
library(NbClust)
#Run the calculation
results=NbClust(corr_results[[3]],distance=distance,min.nc = min_clust,max.nc = max_clust,
method = "ward.D2")
#Get the functions that you will need
source("modified_pheatmap.R")
source('CorrCalculations.R')
#------------------Correlation Analysis----------------------------
#Enter the name of your data sheet
filename="For Correlation Analysis 10302019.xlsx"
#Enter the name of the sheet of the data sheet you are using for calculations
sheetname = "Sheet1"
#Enter correlation type
corr_type="spearman"
#Do you want to export the p values and correlation coefficient data?
export=FALSE
#If you are exporting, what do you want to call the correlation coefficient sheet?
r_export_name = "Testing R value.xlsx"
#If you are exporting, what do you want to call the p-value sheet?
r_export_name = "Testing P value.xlsx"
#Do you want to add a prefix to cluster names? If not, leave as NULL
cluster_prefix=NULL
#Which columns are you using as cells for calculation?
cell_cols = 9:27
#Which columns are you using as clinical measures?
not_cell_cols = 9:27
#Which column indicates the groups you are using?
group_col = 3
#Which groups are you wanting to use? (Ex. groups = c(1,2) if numbered Ex. groups = c("Vaccinated","Naive") if strings)
groups = c(1,2)
#Run the correlation calculation
corr_results = CorrCalculation(filename,sheetname,group_col,cell_cols,not_cell_cols,corr_type,export,
r_export_name,p_export_name,cluster_prefix)
filename="For Correlation Analysis 10302019.xlsx"
#Enter the name of the sheet of the data sheet you are using for calculations
sheetname = "Sheet1"
#Enter correlation type
corr_type="spearman"
#Do you want to export the p values and correlation coefficient data?
export=TRUE
#If you are exporting, what do you want to call the correlation coefficient sheet?
r_export_name = "Testing R value.xlsx"
#If you are exporting, what do you want to call the p-value sheet?
r_export_name = "Testing P value.xlsx"
#Do you want to add a prefix to cluster names? If not, leave as NULL
cluster_prefix=NULL
#Which columns are you using as cells for calculation?
cell_cols = 9:27
#Which columns are you using as clinical measures?
not_cell_cols = 9:27
#Which column indicates the groups you are using?
group_col = 3
#Which groups are you wanting to use? (Ex. groups = c(1,2) if numbered Ex. groups = c("Vaccinated","Naive") if strings)
groups = c(1,2)
#Run the correlation calculation
corr_results = CorrCalculation(filename,sheetname,group_col,cell_cols,not_cell_cols,corr_type,export,
r_export_name,p_export_name,cluster_prefix)
#Enter the name of the sheet of the data sheet you are using for calculations
sheetname = "Sheet1"
#Enter correlation type
corr_type="spearman"
#Do you want to export the p values and correlation coefficient data?
export=TRUE
#If you are exporting, what do you want to call the correlation coefficient sheet?
r_export_name = "Testing R value.xlsx"
#If you are exporting, what do you want to call the p-value sheet?
p_export_name = "Testing P value.xlsx"
#Do you want to add a prefix to cluster names? If not, leave as NULL
cluster_prefix=NULL
#Which columns are you using as cells for calculation?
cell_cols = 9:27
#Which columns are you using as clinical measures?
not_cell_cols = 9:27
#Which column indicates the groups you are using?
group_col = 3
#Which groups are you wanting to use? (Ex. groups = c(1,2) if numbered Ex. groups = c("Vaccinated","Naive") if strings)
groups = c(1,2)
#Run the correlation calculation
corr_results = CorrCalculation(filename,sheetname,group_col,cell_cols,not_cell_cols,corr_type,export,
r_export_name,p_export_name,cluster_prefix)
filename="For Correlation Analysis 10302019.xlsx"
#Enter the name of the sheet of the data sheet you are using for calculations
sheetname = "Sheet1"
#Enter correlation type
corr_type="spearman"
#Do you want to export the p values and correlation coefficient data?
export=TRUE
#If you are exporting, what do you want to call the correlation coefficient sheet?
r_export_name = "Testing R value.xlsx"
#If you are exporting, what do you want to call the p-value sheet?
p_export_name = "Testing P value.xlsx"
#Do you want to add a prefix to cluster names? If not, leave as NULL
cluster_prefix=NULL
#Which columns are you using as cells for calculation?
cell_cols = 9:27
#Which columns are you using as clinical measures?
not_cell_cols = NULL
#Which column indicates the groups you are using?
group_col = 3
#Which groups are you wanting to use? (Ex. groups = c(1,2) if numbered Ex. groups = c("Vaccinated","Naive") if strings)
groups = c(1,2)
#Run the correlation calculation
corr_results = CorrCalculation(filename,sheetname,group_col,cell_cols,not_cell_cols,corr_type,export,
r_export_name,p_export_name,cluster_prefix)
filename="For Correlation Analysis 10302019.xlsx"
#Enter the name of the sheet of the data sheet you are using for calculations
sheetname = "Sheet1"
#Enter correlation type
corr_type="spearman"
#Do you want to export the p values and correlation coefficient data?
export=TRUE
#If you are exporting, what do you want to call the correlation coefficient sheet?
r_export_name = "Testing R value.xlsx"
#If you are exporting, what do you want to call the p-value sheet?
p_export_name = "Testing P value.xlsx"
#Do you want to add a prefix to cluster names? If not, leave as NULL
cluster_prefix=NULL
#Which columns are you using as cells for calculation?
cell_cols = 9:27
#Which columns are you using as clinical measures?
not_cell_cols = NULL
#Which column indicates the groups you are using?
group_col = 3
#Which groups are you wanting to use? (Ex. groups = c(1,2) if numbered Ex. groups = c("Vaccinated","Naive") if strings)
groups = c(1,2)
#Run the correlation calculation
corr_results = CorrCalculation(filename,sheetname,group_col,cell_cols,not_cell_cols,corr_type,export,
r_export_name,p_export_name,cluster_prefix)
#Enter the name of your data sheet
filename="For Correlation Analysis 10302019.xlsx"
#Enter the name of the sheet of the data sheet you are using for calculations
sheetname = "Sheet1"
#Enter correlation type
corr_type="spearman"
#Do you want to export the p values and correlation coefficient data?
export=TRUE
#If you are exporting, what do you want to call the correlation coefficient sheet?
r_export_name = "Testing R value.xlsx"
#If you are exporting, what do you want to call the p-value sheet?
p_export_name = "Testing P value.xlsx"
#Do you want to add a prefix to cluster names? If not, leave as NULL
cluster_prefix=NULL
#Which columns are you using as cells for calculation?
cell_cols = 20:31
#Which columns are you using as clinical measures?
not_cell_cols = NULL
#Which column indicates the groups you are using?
group_col = 3
#Which groups are you wanting to use? (Ex. groups = c(1,2) if numbered Ex. groups = c("Vaccinated","Naive") if strings)
groups = c(1,2)
#Run the correlation calculation
corr_results = CorrCalculation(filename,sheetname,group_col,cell_cols,not_cell_cols,corr_type,export,
r_export_name,p_export_name,cluster_prefix)
View(corr_results)
View(corr_results)
#Check for missing packages and install if needed
list.of.packages <- c("dplyr", "Hmisc","ppcor","openxlsx","flashClust","dendextend","gtable","gridExtra","grid","gdata",
"RColorBrewer","magrittr","factoextra","NbClust")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
