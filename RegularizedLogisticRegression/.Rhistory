axis.line = element_line(colour = "black"),
panel.grid = element_line(colour = "grey"),
plot.margin = unit(c(2,2,2,2), "cm"),
axis.title.y = element_text(angle = 90, vjust = 10, hjust = 0.5, size = 25),
axis.title.x = element_text(angle = 0, vjust = -10, hjust = 0.5, size = 25),
legend.title = element_text(size=19),
legend.text = element_text(size=19))
ggsave(paste(levels(input$Group)[1],
levels(input$Group)[2],"Cross_valid.jpeg",sep = "_"),
plot = last_plot(), units = "mm",
width = 500, height = 300, limitsize = FALSE)
}
#Export cross validation summary
if (export_cv){
cvSummary = as.data.frame(ElasticNet$results)
write.xlsx(cvSummary, paste(day,levels(input_to_reg$Group)[1],
levels(input_to_reg$Group)[2],
"Cross_valid_summary.xlsx",sep = "_"))
}
#Export cross validation summary
if (export_cv){
cvSummary = as.data.frame(ElasticNet$results)
write.xlsx(cvSummary, paste(levels(input_to_reg$Group)[1],
levels(input_to_reg$Group)[2],
"Cross_valid_summary.xlsx",sep = "_"))
}
#Export cross validation summary
if (export_cv){
cvSummary = as.data.frame(ElasticNet$results)
write.xlsx(cvSummary, paste(levels(input$Group)[1],
levels(input$Group)[2],
"Cross_valid_summary.xlsx",sep = "_"))
}
#Extract log odds coefficients
bestEN <- ElasticNet$finalModel
CoefficientsEN = as.matrix(coef(bestEN, s = ElasticNet$bestTune$lambda))
CoefficientsEN = as.data.frame(CoefficientsEN)
rownames(CoefficientsEN) = stringr::str_replace_all(rownames(CoefficientsEN),
"[`]", "")
colnames(CoefficientsEN)[1] = "Change in Log Odds per Unit Increase"
if (export_coeff){
write.xlsx(CoefficientsEN, paste(levels(input_to_reg$Group)[1],
levels(input_to_reg$Group)[2],
"Coeff.xlsx",sep = "_"),
row.names = TRUE)
}
if (export_coeff){
write.xlsx(CoefficientsEN, paste(levels(input$Group)[1],
levels(input$Group)[2],
"Coeff.xlsx",sep = "_"),
row.names = TRUE)
}
#Set up Coefficients waterfall plot data
CoefficientsEN = subset(CoefficientsEN, CoefficientsEN$`Change in Log Odds per Unit Increase`!=0)
CoefficientsEN = CoefficientsEN[2:nrow(CoefficientsEN),,drop = FALSE]
CoefficientsEN = CoefficientsEN[order(-CoefficientsEN$`Change in Log Odds per Unit Increase`),
, drop = FALSE]
CoefficientsEN$`Group` <- rownames(CoefficientsEN)  # create new column for car names
CoefficientsEN$Group <- ifelse(CoefficientsEN$`Change in Log Odds per Unit Increase` < 0,
levels(input_to_reg$Group)[1],
levels(input_to_reg$Group)[2])
#Plot coefficients in waterfall plot
logoddsvalue = CoefficientsEN$`Change in Log Odds per Unit Increase`
features = rownames(CoefficientsEN)
#Extract log odds coefficients
bestEN <- ElasticNet$finalModel
CoefficientsEN = as.matrix(coef(bestEN, s = ElasticNet$bestTune$lambda))
CoefficientsEN = as.data.frame(CoefficientsEN)
rownames(CoefficientsEN) = stringr::str_replace_all(rownames(CoefficientsEN),
"[`]", "")
colnames(CoefficientsEN)[1] = "Change in Log Odds per Unit Increase"
#Set up Coefficients waterfall plot data
CoefficientsEN = subset(CoefficientsEN, CoefficientsEN$`Change in Log Odds per Unit Increase`!=0)
CoefficientsEN = CoefficientsEN[2:nrow(CoefficientsEN),,drop = FALSE]
CoefficientsEN = CoefficientsEN[order(-CoefficientsEN$`Change in Log Odds per Unit Increase`),
, drop = FALSE]
CoefficientsEN$`Group` <- rownames(CoefficientsEN)  # create new column for car names
CoefficientsEN$Group <- ifelse(CoefficientsEN$`Change in Log Odds per Unit Increase` < 0,
levels(input$Group)[1],
levels(input$Group)[2])
#Plot coefficients in waterfall plot
logoddsvalue = CoefficientsEN$`Change in Log Odds per Unit Increase`
features = rownames(CoefficientsEN)
features = factor(features, levels = features[order(logoddsvalue)])
axval = (max(abs(logoddsvalue)) + 0.03)
plot_coef = ggplot(CoefficientsEN, aes(x=features, y=logoddsvalue)) +
geom_bar(stat='identity', aes(fill=Group), width=.6)  +
scale_fill_manual(name="Group",
labels = c(levels(input$Group)[1],levels(input$Group)[2]),
values = plot_colors
) +
labs(subtitle="", title= "") +
theme(text = element_text(size=0.5),
axis.text.x = element_text(face="bold", color="black", size=2.5, angle=0),
axis.text.y = element_text(face="bold", color="black", size=2.5, angle=0),
panel.background = element_blank(),
axis.line = element_line(colour = "black", size = 0.15),
panel.grid = element_line(colour = "grey", size = 0.1),
plot.margin = unit(c(2,2,2,2), "mm"),
axis.title.y = element_text(angle = 90, vjust = 1, hjust = 0.5, size = 4),
axis.title.x = element_text(angle = 0, vjust = -0.3, hjust = 0.5, size = 4),
plot.title = element_text(vjust=3, hjust = 0),
plot.subtitle = element_text(vjust = 3),
legend.title = element_text(size=2),
legend.text = element_text(size=2),
legend.key.size = unit(0.3,"line"),
legend.margin = ggplot2::margin(t=-0.5, unit = "mm")) +
labs(x = "Cell Type", y = expression(paste(Delta, "Log Odds/","Unit Increase"))) +
scale_y_continuous(limits = c(-axval, axval)) +
coord_flip()
plot_coef = ggplot(CoefficientsEN, aes(x=features, y=logoddsvalue)) +
geom_bar(stat='identity', aes(fill=Group), width=.6)  +
scale_fill_manual(name="Group",
labels = c(levels(input$Group)[1],levels(input$Group)[2]),
values = c("Black","Grey")
) +
labs(subtitle="", title= "") +
theme(text = element_text(size=0.5),
axis.text.x = element_text(face="bold", color="black", size=2.5, angle=0),
axis.text.y = element_text(face="bold", color="black", size=2.5, angle=0),
panel.background = element_blank(),
axis.line = element_line(colour = "black", size = 0.15),
panel.grid = element_line(colour = "grey", size = 0.1),
plot.margin = unit(c(2,2,2,2), "mm"),
axis.title.y = element_text(angle = 90, vjust = 1, hjust = 0.5, size = 4),
axis.title.x = element_text(angle = 0, vjust = -0.3, hjust = 0.5, size = 4),
plot.title = element_text(vjust=3, hjust = 0),
plot.subtitle = element_text(vjust = 3),
legend.title = element_text(size=2),
legend.text = element_text(size=2),
legend.key.size = unit(0.3,"line"),
legend.margin = ggplot2::margin(t=-0.5, unit = "mm")) +
labs(x = "Cell Type", y = expression(paste(Delta, "Log Odds/","Unit Increase"))) +
scale_y_continuous(limits = c(-axval, axval)) +
coord_flip()
ggsave(paste(levels(input$Group)[1],
levels(input$Group)[2],
"coeff_plot.jpeg",sep="_"),plot = plot_coef, units = "mm", width = 50, height = 50)
View(bestEN)
#Export cross validation summary
if (export_cv){
cvSummary = as.data.frame(ElasticNet$results)
write.xlsx(cvSummary, paste(levels(input$Group)[1],
levels(input$Group)[2],
"Cross_valid_summary.xlsx",sep = "_"))
}
scale_clusters = TRUE
cluster_prefix = NULL
#Enter the name of your data sheet
filename="For Correlation Analysis 10302019.xlsx"
#Enter the name of the sheet of the data sheet you are using for calculations
sheetname = "Sheet1"
#Do you want to add a prefix to cluster names? If not, leave as NULL
cluster_prefix=NULL
#Which columns are you using as cells for calculation?
cell_cols = 20:31
#Which columns are you using as clinical measures? If none, use NULL and calculation will only be run for cells
not_cell_cols = 2:5
#Which column indicates the groups you are using?
group_col = 3
#Which groups are you wanting to use? (Ex. groups = c(1,2) if numbered Ex. groups = c("Vaccinated","Naive") if strings)
groups = c(1,2)
#Which groups are you wanting to use? (Ex. groups = c(1,2) if numbered Ex. groups = c("Vaccinated","Naive") if strings)
groups = c(1,2,3)
#Which groups are you wanting to use? (Ex. groups = c(1,2) if numbered Ex. groups = c("Vaccinated","Naive") if strings)
groups = c(1,2,3)
#Function for running elastic net over all combinations of groups in an excel file
grp_comb = lapply(seq_len(length(groups)),FUN = function(x)combn(groups, x))
View(grp_comb)
grp_comb[[2]]
#Function for running elastic net over all combinations of groups in an excel file
grp_comb = lapply(seq_len(2),FUN = function(x)combn(groups, x))
View(grp_comb)
#Function for running elastic net over all combinations of groups in an excel file
grp_comb = lapply(seq_len(2),FUN = function(x)combn(groups, x))
View(grp_comb)
grp_comb[[1]]
grp_comb[[2]]
#Function for running elastic net over all combinations of groups in an excel file
grp_comb = lapply(seq_len(2),FUN = function(x)combn(groups, x))[2]
View(grp_comb)
grp_comb[[2]]
grp_comb[[2]]
grp_comb[[1]]
View(grp_comb)
grp_comb[[1]]
#Get all combinations of groups (Pairwise so add sequence length of 2)
grp_comb = as.data.frame(lapply(seq_len(2),FUN = function(x)combn(groups, x))[2])
View(grp_comb)
test = c(grp_comb[1])
View(test)
test[["X1"]]
c(1,2)
#Which groups are you wanting to use? (Ex. groups = c(1,2) if numbered Ex. groups = c("Vaccinated","Naive") if strings)
groups = c("Vax","Vax Sick","Naive")
#Get all combinations of groups (Pairwise so add sequence length of 2)
grp_comb = as.data.frame(lapply(seq_len(2),FUN = function(x)combn(groups, x))[2])
View(grp_comb)
i=1
c(grp_comb[i])
c(grp_comb[i])$levels
c(grp_comb[i])
grp_comb[i]
grp_comb[[i]
grp_comb[[i]]
grp_comb[[i]]
paste(grp_comb)
paste(grp_comb[[i]])
print(paste('Running Elastic Net for groups:',grp_comb,sep = " "))
print(paste('Running Elastic Net for groups:',grp_comb[[i]],sep = " "))
print(paste('Running Elastic Net for groups:',paste(grp_comb[[i]],collapse=" "),sep = " "))
print(paste('Running Elastic Net for groups:',paste(grp_comb[[i]],collapse="-"),sep = " "))
#Print an update
print(paste('Finished Elastic Net for groups:',paste(grp_comb[[i]],collapse="-"),sep = " "))
#Enter the name of your data file (If multiple files, use: c("File1name.xlsx","File2name.xlsx"))
filename="For Correlation Analysis 10302019.xlsx"
#Enter the name of the sheet of the data sheet you are using for calculations (If multiple sheets, use: c("Sheet1name.xlsx","Sheet2name.xlsx"))
sheetname = "Sheet1"
#Scale your data? (z-score)
scale_clusters = TRUE
#Do you want to add a prefix to cluster names? If not, leave as NULL (If multiple sheets, use: c("B","I"))
cluster_prefix=NULL
#Which columns are you using as cells for calculation? (Variables in your excel sheet)
cell_cols = 20:31
#Which columns are you using as clinical measures? If none, use NULL and calculation will only be run for cells. (Variables in your excel sheet)
not_cell_cols = 2:5
#Which column indicates the groups you are using? (Variables in your excel sheet)
group_col = 3
#Which groups are you wanting to use? (Ex. groups = c(1,2) if numbered Ex. groups = c("Vaccinated","Naive") if strings)
groups = c(1,2)
#Enter the name of your data file (If multiple files, use: c("File1name.xlsx","File2name.xlsx"))
filename="For Correlation Analysis 10302019.xlsx"
#Enter the name of the sheet of the data sheet you are using for calculations (If multiple sheets, use: c("Sheet1name.xlsx","Sheet2name.xlsx"))
sheetname = "Sheet1"
#Scale your data? (z-score)
scale_clusters = TRUE
#Do you want to add a prefix to cluster names? If not, leave as NULL (If multiple sheets, use: c("B","I"))
cluster_prefix=NULL
#Which columns are you using as cells for calculation? (Variables in your excel sheet)
cell_cols = 20:31
#Which columns are you using as clinical measures? If none, use NULL and calculation will only be run for cells. (Variables in your excel sheet)
not_cell_cols = 2:5
#Which column indicates the groups you are using? (Variables in your excel sheet)
group_col = 3
#Which groups are you wanting to use? (Ex. groups = c(1,2) if numbered Ex. groups = c("Vaccinated","Naive") if strings)
groups = c(1,2)
#Import modules
source("MasterEN.R")
#Import modules
source("MasterEN.R")
setwd("/Volumes/viclab$/Reeves Team/Josh Hess/gists/Regularized-Logistic-Regression")
#Import modules
source("MasterEN.R")
#Import modules
source("MasterEN.R")
#Import modules
source("MasterEN.R")
#Import modules
source("MasterEN.R")
#Enter the name of your data file (If multiple files, use: c("File1name.xlsx","File2name.xlsx"))
filename = "For Correlation Analysis 10302019.xlsx"
#Enter the name of the sheet of the data sheet you are using for calculations (If multiple sheets, use: c("Sheet1name.xlsx","Sheet2name.xlsx"))
sheetname = "Sheet1"
#Scale your data? (z-score)
scale_clusters = TRUE
#Do you want to add a prefix to cluster names? If not, leave as NULL (If multiple sheets, use: c("B","I"))
cluster_prefix = NULL
#Which columns are you using as cells for calculation? (Variables in your excel sheet)
cell_cols = 20:31
#Which columns are you using as clinical measures? If none, use NULL and calculation will only be run for cells. (Variables in your excel sheet)
not_cell_cols = 2:5
#Which column indicates the groups you are using? (Variables in your excel sheet)
group_col = 3
#Which groups are you wanting to use? (Ex. groups = c(1,2,3) if numbered Ex. groups = c("Vaccinated","Naive","Vax Sick") if strings)
groups = c(1,2,3)
#Which type of cross-validation (Options are "repeated" or "bootstrap")
cv_type = "repeated"
#Export an excile file containing elastic net waterfall plot data (the coefficients)?
export_coeff = TRUE
#Export an image containing elastic net waterfall plot data (the coefficients)?
export_coeff_img=TRUE
#Export an excel file containing elastic net cross-validation data?
export_cv = TRUE
#Export an image containing elastic net cross-validation data?
export_cv_img = TRUE
#How many cores to use for the calculations? (Ex: 10)
num_cores = 8
#Run function for all pairwise elastic nets
resuls = MasterEN(filename,sheetname,group_col,groups,cell_cols,not_cell_cols,scale_clusters,cluster_prefix=NULL,
cv_type,export_coeff,export_coeff_img,export_cv,export_cv_img,num_cores)
#Import modules
source("MasterEN.R")
#Enter the name of your data file (If multiple files, use: c("File1name.xlsx","File2name.xlsx"))
filename = "For Correlation Analysis 10302019.xlsx"
#Enter the name of the sheet of the data sheet you are using for calculations (If multiple sheets, use: c("Sheet1name.xlsx","Sheet2name.xlsx"))
sheetname = "Sheet1"
#Scale your data? (z-score)
scale_clusters = TRUE
#Do you want to add a prefix to cluster names? If not, leave as NULL (If multiple sheets, use: c("B","I"))
cluster_prefix = NULL
#Which columns are you using as cells for calculation? (Variables in your excel sheet)
cell_cols = 20:31
#Which columns are you using as clinical measures? If none, use NULL and calculation will only be run for cells. (Variables in your excel sheet)
not_cell_cols = 2:5
#Which column indicates the groups you are using? (Variables in your excel sheet)
group_col = 3
#Which groups are you wanting to use? (Ex. groups = c(1,2,3) if numbered Ex. groups = c("Vaccinated","Naive","Vax Sick") if strings)
groups = c(1,2,3)
#Which type of cross-validation (Options are "repeated" or "bootstrap")
cv_type = "repeated"
#Export an excile file containing elastic net waterfall plot data (the coefficients)?
export_coeff = TRUE
#Export an image containing elastic net waterfall plot data (the coefficients)?
export_coeff_img=TRUE
#Export an excel file containing elastic net cross-validation data?
export_cv = TRUE
#Export an image containing elastic net cross-validation data?
export_cv_img = TRUE
#How many cores to use for the calculations? (Ex: 10)
num_cores = 8
#Run function for all pairwise elastic nets
results = MasterEN(filename,sheetname,group_col,groups,cell_cols,not_cell_cols,scale_clusters,cluster_prefix=NULL,
cv_type,export_coeff,export_coeff_img,export_cv,export_cv_img,num_cores)
View(grp_comb)
#Create a list to store results in
results_list = list()
#Read data and run elastic net for each combination
for (i in ncol(grp_comb)){
#Print an update
print(paste('Running Elastic Net for groups:',paste(grp_comb[[i]],collapse="-"),sep = " "))
#Read data
data = ReadData(filename,sheetname,group_col,c(grp_comb[i]),cell_cols,not_cell_cols,scale_clusters,cluster_prefix)
#Run elastic net
tmp_EN = RunEN(data,cv_type,export_coeff,export_coeff_img,export_cv,export_cv_img,num_cores)
#Print an update
print(paste('Finished Elastic Net for groups:',paste(grp_comb[[i]],collapse="-"),sep = " "))
#Add this model to the return list
results_list[[i]] = tmp_EN
}
i=1
#Print an update
print(paste('Running Elastic Net for groups:',paste(grp_comb[[i]],collapse="-"),sep = " "))
#Enter the name of your data file (If multiple files, use: c("File1name.xlsx","File2name.xlsx"))
filename = "For Correlation Analysis 10302019.xlsx"
#Enter the name of the sheet of the data sheet you are using for calculations (If multiple sheets, use: c("Sheet1name.xlsx","Sheet2name.xlsx"))
sheetname = "Sheet1"
#Scale your data? (z-score)
scale_clusters = TRUE
#Do you want to add a prefix to cluster names? If not, leave as NULL (If multiple sheets, use: c("B","I"))
cluster_prefix = NULL
#Which columns are you using as cells for calculation? (Variables in your excel sheet)
cell_cols = 20:31
#Which columns are you using as clinical measures? If none, use NULL and calculation will only be run for cells. (Variables in your excel sheet)
not_cell_cols = 2:5
#Which column indicates the groups you are using? (Variables in your excel sheet)
group_col = 3
#Which groups are you wanting to use? (Ex. groups = c(1,2,3) if numbered Ex. groups = c("Vaccinated","Naive","Vax Sick") if strings)
groups = c(1,2,3)
#Which type of cross-validation (Options are "repeated" or "bootstrap")
cv_type = "repeated"
#Export an excile file containing elastic net waterfall plot data (the coefficients)?
export_coeff = TRUE
#Export an image containing elastic net waterfall plot data (the coefficients)?
export_coeff_img=TRUE
#Export an excel file containing elastic net cross-validation data?
export_cv = TRUE
#Export an image containing elastic net cross-validation data?
export_cv_img = TRUE
#How many cores to use for the calculations? (Ex: 10)
num_cores = 8
#Get all combinations of groups (Pairwise so add sequence length of 2)
grp_comb = as.data.frame(lapply(seq_len(2),FUN = function(x)combn(groups, x))[2])
#Create a list to store results in
results_list = list()
i=1
#Print an update
print(paste('Running Elastic Net for groups:',paste(grp_comb[[i]],collapse="-"),sep = " "))
#Read data
data = ReadData(filename,sheetname,group_col,c(grp_comb[i]),cell_cols,not_cell_cols,scale_clusters,cluster_prefix)
#Import custom functions
source("ReadData.R")
source("EN.R")
#Read data
data = ReadData(filename,sheetname,group_col,c(grp_comb[i]),cell_cols,not_cell_cols,scale_clusters,cluster_prefix)
#Run elastic net
tmp_EN = RunEN(data,cv_type,export_coeff,export_coeff_img,export_cv,export_cv_img,num_cores)
View(data)
#Read data
data = ReadData(filename,sheetname,group_col,grp_comb[[i]],cell_cols,not_cell_cols,scale_clusters,cluster_prefix)
#Enter the name of your data file (If multiple files, use: c("File1name.xlsx","File2name.xlsx"))
filename = "For Correlation Analysis 10302019.xlsx"
#Enter the name of the sheet of the data sheet you are using for calculations (If multiple sheets, use: c("Sheet1name.xlsx","Sheet2name.xlsx"))
sheetname = "Sheet1"
#Scale your data? (z-score)
scale_clusters = TRUE
#Do you want to add a prefix to cluster names? If not, leave as NULL (If multiple sheets, use: c("B","I"))
cluster_prefix = NULL
#Which columns are you using as cells for calculation? (Variables in your excel sheet)
cell_cols = 20:31
#Which columns are you using as clinical measures? If none, use NULL and calculation will only be run for cells. (Variables in your excel sheet)
not_cell_cols = 2:5
#Which column indicates the groups you are using? (Variables in your excel sheet)
group_col = 3
#Which groups are you wanting to use? (Ex. groups = c(1,2,3) if numbered Ex. groups = c("Vaccinated","Naive","Vax Sick") if strings)
groups = c(1,2,3)
#Which type of cross-validation (Options are "repeated" or "bootstrap")
cv_type = "repeated"
#Export an excile file containing elastic net waterfall plot data (the coefficients)?
export_coeff = TRUE
#Export an image containing elastic net waterfall plot data (the coefficients)?
export_coeff_img=TRUE
#Export an excel file containing elastic net cross-validation data?
export_cv = TRUE
#Export an image containing elastic net cross-validation data?
export_cv_img = TRUE
#How many cores to use for the calculations? (Ex: 10)
num_cores = 8
#Run function for all pairwise elastic nets
results = MasterEN(filename,sheetname,group_col,groups,cell_cols,not_cell_cols,scale_clusters,cluster_prefix=NULL,
cv_type,export_coeff,export_coeff_img,export_cv,export_cv_img,num_cores)
#Import modules
source("MasterEN.R")
#Run function for all pairwise elastic nets
results = MasterEN(filename,sheetname,group_col,groups,cell_cols,not_cell_cols,scale_clusters,cluster_prefix=NULL,
cv_type,export_coeff,export_coeff_img,export_cv,export_cv_img,num_cores)
#Import modules (Do not change)
source("MasterEN.R")
#Enter the name of your data file (If multiple files, use: c("File1name.xlsx","File2name.xlsx"))
filename = "For Correlation Analysis 10302019.xlsx"
#Enter the name of the sheet of the data sheet you are using for calculations (If multiple sheets, use: c("Sheet1name.xlsx","Sheet2name.xlsx"))
sheetname = "Sheet1"
#Scale your data? (z-score)
scale_clusters = TRUE
#Do you want to add a prefix to cluster names? If not, leave as NULL (If multiple sheets, use: c("B","I"))
cluster_prefix = NULL
#Which columns are you using as cells for calculation? (Variables in your excel sheet)
cell_cols = 20:31
#Which columns are you using as clinical measures? If none, use NULL and calculation will only be run for cells. (Variables in your excel sheet)
not_cell_cols = 2:5
#Which column indicates the groups you are using? (Variables in your excel sheet)
group_col = 3
#Which groups are you wanting to use? (Ex. groups = c(1,2,3) if numbered Ex. groups = c("Vaccinated","Naive","Vax Sick") if strings)
groups = c(1,2,3)
#Which type of cross-validation (Options are "repeated" or "bootstrap")
cv_type = "repeated"
#Export an excile file containing elastic net waterfall plot data (the coefficients)?
export_coeff = TRUE
#Export an image containing elastic net waterfall plot data (the coefficients)?
export_coeff_img=TRUE
#Export an excel file containing elastic net cross-validation data?
export_cv = TRUE
#Export an image containing elastic net cross-validation data?
export_cv_img = TRUE
#How many cores to use for the calculations? (Ex: 10)
num_cores = 8
#Run function for all pairwise elastic nets
results = MasterEN(filename,sheetname,group_col,groups,cell_cols,not_cell_cols,scale_clusters,cluster_prefix=NULL,
cv_type,export_coeff,export_coeff_img,export_cv,export_cv_img,num_cores)
#Import modules (Do not change)
source("MasterEN.R")
#Enter the name of your data file (If multiple files, use: c("File1name.xlsx","File2name.xlsx"))
filename = "For Correlation Analysis 10302019.xlsx"
#Enter the name of the sheet of the data sheet you are using for calculations (If multiple sheets, use: c("Sheet1name.xlsx","Sheet2name.xlsx"))
sheetname = "Sheet1"
#Scale your data? (z-score)
scale_clusters = TRUE
#Do you want to add a prefix to cluster names? If not, leave as NULL (If multiple sheets, use: c("B","I"))
cluster_prefix = NULL
#Which columns are you using as cells for calculation? (Variables in your excel sheet)
cell_cols = 20:31
#Which columns are you using as clinical measures? If none, use NULL and calculation will only be run for cells. (Variables in your excel sheet)
not_cell_cols = 2:5
#Which column indicates the groups you are using? (Variables in your excel sheet)
group_col = 3
#Which groups are you wanting to use? (Ex. groups = c(1,2,3) if numbered Ex. groups = c("Vaccinated","Naive","Vax Sick") if strings)
groups = c(1,2,3)
#Which type of cross-validation (Options are "repeated" or "bootstrap")
cv_type = "repeated"
#Export an excile file containing elastic net waterfall plot data (the coefficients)?
export_coeff = TRUE
#Export an image containing elastic net waterfall plot data (the coefficients)?
export_coeff_img=TRUE
#Export an excel file containing elastic net cross-validation data?
export_cv = TRUE
#Export an image containing elastic net cross-validation data?
export_cv_img = TRUE
#How many cores to use for the calculations? (Ex: 10)
num_cores = 8
#Run function for all pairwise elastic nets
results = MasterEN(filename,sheetname,group_col,groups,cell_cols,not_cell_cols,scale_clusters,cluster_prefix=NULL,
cv_type,export_coeff,export_coeff_img,export_cv,export_cv_img,num_cores)
#Functions for Running Regularized Logistic Regression
#Joshua Hess
#Check for missing packages and install if needed
list.of.packages <- c("caret", "doParallel","MLmetrics","varhandle","openxlsx")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
require(caret)
require(doParallel)
require(MLmetrics)
require(varhandle)
require(openxlsx)
#Import custom function
source("ReadData.R")
library(readxl)
Reorder_Live_Cells_No_Ref_20000per_k_22_c84_Regression <- read_excel("/Volumes/viclab$/Raju Paul/Josh Hess/Trauma Mendoza/Trauma Regularized-Logistic-Regression/Live Cells (No Ref) 20000per k=22 c84 (Clusters 0.05)/Reorder Live Cells (No Ref) 20000per k=22 c84 Regression.xlsx")
View(Reorder_Live_Cells_No_Ref_20000per_k_22_c84_Regression)
library(readxl)
G1_G2_Coeff <- read_excel("/Volumes/viclab$/Raju Paul/Josh Hess/Trauma Mendoza/Trauma Regularized-Logistic-Regression/Live Cells (No Ref) 20000per k=22 c84 (Clusters 0.05)/G1_G2_Coeff.xlsx")
View(G1_G2_Coeff)
input = G1_G2_Coeff
View(input)
